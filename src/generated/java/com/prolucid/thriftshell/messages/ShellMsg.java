/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.prolucid.thriftshell.messages;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class ShellMsg extends org.apache.thrift.TUnion<ShellMsg, ShellMsg._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ShellMsg");
  private static final org.apache.thrift.protocol.TField OK_FIELD_DESC = new org.apache.thrift.protocol.TField("ok", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField FAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("fail", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField EMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("emit", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("log", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField SYNC_FIELD_DESC = new org.apache.thrift.protocol.TField("sync", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField METRIC_FIELD_DESC = new org.apache.thrift.protocol.TField("metric", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OK((short)1, "ok"),
    FAIL((short)2, "fail"),
    EMIT((short)3, "emit"),
    PID((short)4, "pid"),
    LOG((short)5, "log"),
    SYNC((short)6, "sync"),
    METRIC((short)7, "metric");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OK
          return OK;
        case 2: // FAIL
          return FAIL;
        case 3: // EMIT
          return EMIT;
        case 4: // PID
          return PID;
        case 5: // LOG
          return LOG;
        case 6: // SYNC
          return SYNC;
        case 7: // METRIC
          return METRIC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OK, new org.apache.thrift.meta_data.FieldMetaData("ok", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OkReply.class)));
    tmpMap.put(_Fields.FAIL, new org.apache.thrift.meta_data.FieldMetaData("fail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FailReply.class)));
    tmpMap.put(_Fields.EMIT, new org.apache.thrift.meta_data.FieldMetaData("emit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmitCommand.class)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PidReply.class)));
    tmpMap.put(_Fields.LOG, new org.apache.thrift.meta_data.FieldMetaData("log", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LogCommand.class)));
    tmpMap.put(_Fields.SYNC, new org.apache.thrift.meta_data.FieldMetaData("sync", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SyncReply.class)));
    tmpMap.put(_Fields.METRIC, new org.apache.thrift.meta_data.FieldMetaData("metric", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Metric.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ShellMsg.class, metaDataMap);
  }

  public ShellMsg() {
    super();
  }

  public ShellMsg(_Fields setField, Object value) {
    super(setField, value);
  }

  public ShellMsg(ShellMsg other) {
    super(other);
  }
  public ShellMsg deepCopy() {
    return new ShellMsg(this);
  }

  public static ShellMsg ok(OkReply value) {
    ShellMsg x = new ShellMsg();
    x.setOk(value);
    return x;
  }

  public static ShellMsg fail(FailReply value) {
    ShellMsg x = new ShellMsg();
    x.setFail(value);
    return x;
  }

  public static ShellMsg emit(EmitCommand value) {
    ShellMsg x = new ShellMsg();
    x.setEmit(value);
    return x;
  }

  public static ShellMsg pid(PidReply value) {
    ShellMsg x = new ShellMsg();
    x.setPid(value);
    return x;
  }

  public static ShellMsg log(LogCommand value) {
    ShellMsg x = new ShellMsg();
    x.setLog(value);
    return x;
  }

  public static ShellMsg sync(SyncReply value) {
    ShellMsg x = new ShellMsg();
    x.setSync(value);
    return x;
  }

  public static ShellMsg metric(Metric value) {
    ShellMsg x = new ShellMsg();
    x.setMetric(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case OK:
        if (value instanceof OkReply) {
          break;
        }
        throw new ClassCastException("Was expecting value of type OkReply for field 'ok', but got " + value.getClass().getSimpleName());
      case FAIL:
        if (value instanceof FailReply) {
          break;
        }
        throw new ClassCastException("Was expecting value of type FailReply for field 'fail', but got " + value.getClass().getSimpleName());
      case EMIT:
        if (value instanceof EmitCommand) {
          break;
        }
        throw new ClassCastException("Was expecting value of type EmitCommand for field 'emit', but got " + value.getClass().getSimpleName());
      case PID:
        if (value instanceof PidReply) {
          break;
        }
        throw new ClassCastException("Was expecting value of type PidReply for field 'pid', but got " + value.getClass().getSimpleName());
      case LOG:
        if (value instanceof LogCommand) {
          break;
        }
        throw new ClassCastException("Was expecting value of type LogCommand for field 'log', but got " + value.getClass().getSimpleName());
      case SYNC:
        if (value instanceof SyncReply) {
          break;
        }
        throw new ClassCastException("Was expecting value of type SyncReply for field 'sync', but got " + value.getClass().getSimpleName());
      case METRIC:
        if (value instanceof Metric) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Metric for field 'metric', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case OK:
          if (field.type == OK_FIELD_DESC.type) {
            OkReply ok;
            ok = new OkReply();
            ok.read(iprot);
            return ok;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case FAIL:
          if (field.type == FAIL_FIELD_DESC.type) {
            FailReply fail;
            fail = new FailReply();
            fail.read(iprot);
            return fail;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case EMIT:
          if (field.type == EMIT_FIELD_DESC.type) {
            EmitCommand emit;
            emit = new EmitCommand();
            emit.read(iprot);
            return emit;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PID:
          if (field.type == PID_FIELD_DESC.type) {
            PidReply pid;
            pid = new PidReply();
            pid.read(iprot);
            return pid;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LOG:
          if (field.type == LOG_FIELD_DESC.type) {
            LogCommand log;
            log = new LogCommand();
            log.read(iprot);
            return log;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SYNC:
          if (field.type == SYNC_FIELD_DESC.type) {
            SyncReply sync;
            sync = new SyncReply();
            sync.read(iprot);
            return sync;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case METRIC:
          if (field.type == METRIC_FIELD_DESC.type) {
            Metric metric;
            metric = new Metric();
            metric.read(iprot);
            return metric;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case OK:
        OkReply ok = (OkReply)value_;
        ok.write(oprot);
        return;
      case FAIL:
        FailReply fail = (FailReply)value_;
        fail.write(oprot);
        return;
      case EMIT:
        EmitCommand emit = (EmitCommand)value_;
        emit.write(oprot);
        return;
      case PID:
        PidReply pid = (PidReply)value_;
        pid.write(oprot);
        return;
      case LOG:
        LogCommand log = (LogCommand)value_;
        log.write(oprot);
        return;
      case SYNC:
        SyncReply sync = (SyncReply)value_;
        sync.write(oprot);
        return;
      case METRIC:
        Metric metric = (Metric)value_;
        metric.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case OK:
          OkReply ok;
          ok = new OkReply();
          ok.read(iprot);
          return ok;
        case FAIL:
          FailReply fail;
          fail = new FailReply();
          fail.read(iprot);
          return fail;
        case EMIT:
          EmitCommand emit;
          emit = new EmitCommand();
          emit.read(iprot);
          return emit;
        case PID:
          PidReply pid;
          pid = new PidReply();
          pid.read(iprot);
          return pid;
        case LOG:
          LogCommand log;
          log = new LogCommand();
          log.read(iprot);
          return log;
        case SYNC:
          SyncReply sync;
          sync = new SyncReply();
          sync.read(iprot);
          return sync;
        case METRIC:
          Metric metric;
          metric = new Metric();
          metric.read(iprot);
          return metric;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case OK:
        OkReply ok = (OkReply)value_;
        ok.write(oprot);
        return;
      case FAIL:
        FailReply fail = (FailReply)value_;
        fail.write(oprot);
        return;
      case EMIT:
        EmitCommand emit = (EmitCommand)value_;
        emit.write(oprot);
        return;
      case PID:
        PidReply pid = (PidReply)value_;
        pid.write(oprot);
        return;
      case LOG:
        LogCommand log = (LogCommand)value_;
        log.write(oprot);
        return;
      case SYNC:
        SyncReply sync = (SyncReply)value_;
        sync.write(oprot);
        return;
      case METRIC:
        Metric metric = (Metric)value_;
        metric.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case OK:
        return OK_FIELD_DESC;
      case FAIL:
        return FAIL_FIELD_DESC;
      case EMIT:
        return EMIT_FIELD_DESC;
      case PID:
        return PID_FIELD_DESC;
      case LOG:
        return LOG_FIELD_DESC;
      case SYNC:
        return SYNC_FIELD_DESC;
      case METRIC:
        return METRIC_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public OkReply getOk() {
    if (getSetField() == _Fields.OK) {
      return (OkReply)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'ok' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setOk(OkReply value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.OK;
    value_ = value;
  }

  public FailReply getFail() {
    if (getSetField() == _Fields.FAIL) {
      return (FailReply)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'fail' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setFail(FailReply value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.FAIL;
    value_ = value;
  }

  public EmitCommand getEmit() {
    if (getSetField() == _Fields.EMIT) {
      return (EmitCommand)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'emit' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setEmit(EmitCommand value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.EMIT;
    value_ = value;
  }

  public PidReply getPid() {
    if (getSetField() == _Fields.PID) {
      return (PidReply)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'pid' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPid(PidReply value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.PID;
    value_ = value;
  }

  public LogCommand getLog() {
    if (getSetField() == _Fields.LOG) {
      return (LogCommand)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'log' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setLog(LogCommand value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.LOG;
    value_ = value;
  }

  public SyncReply getSync() {
    if (getSetField() == _Fields.SYNC) {
      return (SyncReply)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'sync' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSync(SyncReply value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SYNC;
    value_ = value;
  }

  public Metric getMetric() {
    if (getSetField() == _Fields.METRIC) {
      return (Metric)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'metric' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMetric(Metric value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.METRIC;
    value_ = value;
  }

  public boolean isSetOk() {
    return setField_ == _Fields.OK;
  }


  public boolean isSetFail() {
    return setField_ == _Fields.FAIL;
  }


  public boolean isSetEmit() {
    return setField_ == _Fields.EMIT;
  }


  public boolean isSetPid() {
    return setField_ == _Fields.PID;
  }


  public boolean isSetLog() {
    return setField_ == _Fields.LOG;
  }


  public boolean isSetSync() {
    return setField_ == _Fields.SYNC;
  }


  public boolean isSetMetric() {
    return setField_ == _Fields.METRIC;
  }


  public boolean equals(Object other) {
    if (other instanceof ShellMsg) {
      return equals((ShellMsg)other);
    } else {
      return false;
    }
  }

  public boolean equals(ShellMsg other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(ShellMsg other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
