/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.prolucid.thriftshell.messages;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-10")
public class Context implements org.apache.thrift.TBase<Context, Context._Fields>, java.io.Serializable, Cloneable, Comparable<Context> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Context");

  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_COMPONENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("taskComponents", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("componentId", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContextStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContextTupleSchemeFactory());
  }

  public int taskId; // required
  public Map<Integer,String> taskComponents; // required
  public String componentId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_ID((short)1, "taskId"),
    TASK_COMPONENTS((short)2, "taskComponents"),
    COMPONENT_ID((short)3, "componentId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_ID
          return TASK_ID;
        case 2: // TASK_COMPONENTS
          return TASK_COMPONENTS;
        case 3: // COMPONENT_ID
          return COMPONENT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TASKID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TASK_COMPONENTS, new org.apache.thrift.meta_data.FieldMetaData("taskComponents", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("componentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Context.class, metaDataMap);
  }

  public Context() {
  }

  public Context(
    int taskId,
    Map<Integer,String> taskComponents,
    String componentId)
  {
    this();
    this.taskId = taskId;
    setTaskIdIsSet(true);
    this.taskComponents = taskComponents;
    this.componentId = componentId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Context(Context other) {
    __isset_bitfield = other.__isset_bitfield;
    this.taskId = other.taskId;
    if (other.isSetTaskComponents()) {
      Map<Integer,String> __this__taskComponents = new HashMap<Integer,String>(other.taskComponents);
      this.taskComponents = __this__taskComponents;
    }
    if (other.isSetComponentId()) {
      this.componentId = other.componentId;
    }
  }

  public Context deepCopy() {
    return new Context(this);
  }

  @Override
  public void clear() {
    setTaskIdIsSet(false);
    this.taskId = 0;
    this.taskComponents = null;
    this.componentId = null;
  }

  public int getTaskId() {
    return this.taskId;
  }

  public Context setTaskId(int taskId) {
    this.taskId = taskId;
    setTaskIdIsSet(true);
    return this;
  }

  public void unsetTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  public int getTaskComponentsSize() {
    return (this.taskComponents == null) ? 0 : this.taskComponents.size();
  }

  public void putToTaskComponents(int key, String val) {
    if (this.taskComponents == null) {
      this.taskComponents = new HashMap<Integer,String>();
    }
    this.taskComponents.put(key, val);
  }

  public Map<Integer,String> getTaskComponents() {
    return this.taskComponents;
  }

  public Context setTaskComponents(Map<Integer,String> taskComponents) {
    this.taskComponents = taskComponents;
    return this;
  }

  public void unsetTaskComponents() {
    this.taskComponents = null;
  }

  /** Returns true if field taskComponents is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskComponents() {
    return this.taskComponents != null;
  }

  public void setTaskComponentsIsSet(boolean value) {
    if (!value) {
      this.taskComponents = null;
    }
  }

  public String getComponentId() {
    return this.componentId;
  }

  public Context setComponentId(String componentId) {
    this.componentId = componentId;
    return this;
  }

  public void unsetComponentId() {
    this.componentId = null;
  }

  /** Returns true if field componentId is set (has been assigned a value) and false otherwise */
  public boolean isSetComponentId() {
    return this.componentId != null;
  }

  public void setComponentIdIsSet(boolean value) {
    if (!value) {
      this.componentId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((Integer)value);
      }
      break;

    case TASK_COMPONENTS:
      if (value == null) {
        unsetTaskComponents();
      } else {
        setTaskComponents((Map<Integer,String>)value);
      }
      break;

    case COMPONENT_ID:
      if (value == null) {
        unsetComponentId();
      } else {
        setComponentId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_ID:
      return getTaskId();

    case TASK_COMPONENTS:
      return getTaskComponents();

    case COMPONENT_ID:
      return getComponentId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_ID:
      return isSetTaskId();
    case TASK_COMPONENTS:
      return isSetTaskComponents();
    case COMPONENT_ID:
      return isSetComponentId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Context)
      return this.equals((Context)that);
    return false;
  }

  public boolean equals(Context that) {
    if (that == null)
      return false;

    boolean this_present_taskId = true;
    boolean that_present_taskId = true;
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (this.taskId != that.taskId)
        return false;
    }

    boolean this_present_taskComponents = true && this.isSetTaskComponents();
    boolean that_present_taskComponents = true && that.isSetTaskComponents();
    if (this_present_taskComponents || that_present_taskComponents) {
      if (!(this_present_taskComponents && that_present_taskComponents))
        return false;
      if (!this.taskComponents.equals(that.taskComponents))
        return false;
    }

    boolean this_present_componentId = true && this.isSetComponentId();
    boolean that_present_componentId = true && that.isSetComponentId();
    if (this_present_componentId || that_present_componentId) {
      if (!(this_present_componentId && that_present_componentId))
        return false;
      if (!this.componentId.equals(that.componentId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_taskId = true;
    list.add(present_taskId);
    if (present_taskId)
      list.add(taskId);

    boolean present_taskComponents = true && (isSetTaskComponents());
    list.add(present_taskComponents);
    if (present_taskComponents)
      list.add(taskComponents);

    boolean present_componentId = true && (isSetComponentId());
    list.add(present_componentId);
    if (present_componentId)
      list.add(componentId);

    return list.hashCode();
  }

  @Override
  public int compareTo(Context other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskComponents()).compareTo(other.isSetTaskComponents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskComponents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskComponents, other.taskComponents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComponentId()).compareTo(other.isSetComponentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComponentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentId, other.componentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Context(");
    boolean first = true;

    sb.append("taskId:");
    sb.append(this.taskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskComponents:");
    if (this.taskComponents == null) {
      sb.append("null");
    } else {
      sb.append(this.taskComponents);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("componentId:");
    if (this.componentId == null) {
      sb.append("null");
    } else {
      sb.append(this.componentId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'taskId' because it's a primitive and you chose the non-beans generator.
    if (taskComponents == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskComponents' was not present! Struct: " + toString());
    }
    if (componentId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'componentId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContextStandardSchemeFactory implements SchemeFactory {
    public ContextStandardScheme getScheme() {
      return new ContextStandardScheme();
    }
  }

  private static class ContextStandardScheme extends StandardScheme<Context> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Context struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskId = iprot.readI32();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_COMPONENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.taskComponents = new HashMap<Integer,String>(2*_map0.size);
                int _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readI32();
                  _val2 = iprot.readString();
                  struct.taskComponents.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setTaskComponentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPONENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.componentId = iprot.readString();
              struct.setComponentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTaskId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Context struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeI32(struct.taskId);
      oprot.writeFieldEnd();
      if (struct.taskComponents != null) {
        oprot.writeFieldBegin(TASK_COMPONENTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.taskComponents.size()));
          for (Map.Entry<Integer, String> _iter4 : struct.taskComponents.entrySet())
          {
            oprot.writeI32(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.componentId != null) {
        oprot.writeFieldBegin(COMPONENT_ID_FIELD_DESC);
        oprot.writeString(struct.componentId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContextTupleSchemeFactory implements SchemeFactory {
    public ContextTupleScheme getScheme() {
      return new ContextTupleScheme();
    }
  }

  private static class ContextTupleScheme extends TupleScheme<Context> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Context struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.taskId);
      {
        oprot.writeI32(struct.taskComponents.size());
        for (Map.Entry<Integer, String> _iter5 : struct.taskComponents.entrySet())
        {
          oprot.writeI32(_iter5.getKey());
          oprot.writeString(_iter5.getValue());
        }
      }
      oprot.writeString(struct.componentId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Context struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.taskId = iprot.readI32();
      struct.setTaskIdIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.taskComponents = new HashMap<Integer,String>(2*_map6.size);
        int _key7;
        String _val8;
        for (int _i9 = 0; _i9 < _map6.size; ++_i9)
        {
          _key7 = iprot.readI32();
          _val8 = iprot.readString();
          struct.taskComponents.put(_key7, _val8);
        }
      }
      struct.setTaskComponentsIsSet(true);
      struct.componentId = iprot.readString();
      struct.setComponentIdIsSet(true);
    }
  }

}

