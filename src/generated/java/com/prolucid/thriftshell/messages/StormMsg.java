/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.prolucid.thriftshell.messages;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class StormMsg extends org.apache.thrift.TUnion<StormMsg, StormMsg._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StormMsg");
  private static final org.apache.thrift.protocol.TField HANDSHAKE_FIELD_DESC = new org.apache.thrift.protocol.TField("handshake", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField NEXT_CMD_FIELD_DESC = new org.apache.thrift.protocol.TField("nextCmd", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ACK_CMD_FIELD_DESC = new org.apache.thrift.protocol.TField("ackCmd", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField NACK_CMD_FIELD_DESC = new org.apache.thrift.protocol.TField("nackCmd", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField STREAM_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("streamIn", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField TASK_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("taskIds", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField HEARBEAT_FIELD_DESC = new org.apache.thrift.protocol.TField("hearbeat", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HANDSHAKE((short)1, "handshake"),
    NEXT_CMD((short)2, "nextCmd"),
    ACK_CMD((short)3, "ackCmd"),
    NACK_CMD((short)4, "nackCmd"),
    STREAM_IN((short)5, "streamIn"),
    TASK_IDS((short)6, "taskIds"),
    HEARBEAT((short)7, "hearbeat");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HANDSHAKE
          return HANDSHAKE;
        case 2: // NEXT_CMD
          return NEXT_CMD;
        case 3: // ACK_CMD
          return ACK_CMD;
        case 4: // NACK_CMD
          return NACK_CMD;
        case 5: // STREAM_IN
          return STREAM_IN;
        case 6: // TASK_IDS
          return TASK_IDS;
        case 7: // HEARBEAT
          return HEARBEAT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HANDSHAKE, new org.apache.thrift.meta_data.FieldMetaData("handshake", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Handshake.class)));
    tmpMap.put(_Fields.NEXT_CMD, new org.apache.thrift.meta_data.FieldMetaData("nextCmd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NextCommand.class)));
    tmpMap.put(_Fields.ACK_CMD, new org.apache.thrift.meta_data.FieldMetaData("ackCmd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AckCommand.class)));
    tmpMap.put(_Fields.NACK_CMD, new org.apache.thrift.meta_data.FieldMetaData("nackCmd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NackCommand.class)));
    tmpMap.put(_Fields.STREAM_IN, new org.apache.thrift.meta_data.FieldMetaData("streamIn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StreamIn.class)));
    tmpMap.put(_Fields.TASK_IDS, new org.apache.thrift.meta_data.FieldMetaData("taskIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TaskIdsReply.class)));
    tmpMap.put(_Fields.HEARBEAT, new org.apache.thrift.meta_data.FieldMetaData("hearbeat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Heartbeat.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StormMsg.class, metaDataMap);
  }

  public StormMsg() {
    super();
  }

  public StormMsg(_Fields setField, Object value) {
    super(setField, value);
  }

  public StormMsg(StormMsg other) {
    super(other);
  }
  public StormMsg deepCopy() {
    return new StormMsg(this);
  }

  public static StormMsg handshake(Handshake value) {
    StormMsg x = new StormMsg();
    x.setHandshake(value);
    return x;
  }

  public static StormMsg nextCmd(NextCommand value) {
    StormMsg x = new StormMsg();
    x.setNextCmd(value);
    return x;
  }

  public static StormMsg ackCmd(AckCommand value) {
    StormMsg x = new StormMsg();
    x.setAckCmd(value);
    return x;
  }

  public static StormMsg nackCmd(NackCommand value) {
    StormMsg x = new StormMsg();
    x.setNackCmd(value);
    return x;
  }

  public static StormMsg streamIn(StreamIn value) {
    StormMsg x = new StormMsg();
    x.setStreamIn(value);
    return x;
  }

  public static StormMsg taskIds(TaskIdsReply value) {
    StormMsg x = new StormMsg();
    x.setTaskIds(value);
    return x;
  }

  public static StormMsg hearbeat(Heartbeat value) {
    StormMsg x = new StormMsg();
    x.setHearbeat(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case HANDSHAKE:
        if (value instanceof Handshake) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Handshake for field 'handshake', but got " + value.getClass().getSimpleName());
      case NEXT_CMD:
        if (value instanceof NextCommand) {
          break;
        }
        throw new ClassCastException("Was expecting value of type NextCommand for field 'nextCmd', but got " + value.getClass().getSimpleName());
      case ACK_CMD:
        if (value instanceof AckCommand) {
          break;
        }
        throw new ClassCastException("Was expecting value of type AckCommand for field 'ackCmd', but got " + value.getClass().getSimpleName());
      case NACK_CMD:
        if (value instanceof NackCommand) {
          break;
        }
        throw new ClassCastException("Was expecting value of type NackCommand for field 'nackCmd', but got " + value.getClass().getSimpleName());
      case STREAM_IN:
        if (value instanceof StreamIn) {
          break;
        }
        throw new ClassCastException("Was expecting value of type StreamIn for field 'streamIn', but got " + value.getClass().getSimpleName());
      case TASK_IDS:
        if (value instanceof TaskIdsReply) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TaskIdsReply for field 'taskIds', but got " + value.getClass().getSimpleName());
      case HEARBEAT:
        if (value instanceof Heartbeat) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Heartbeat for field 'hearbeat', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case HANDSHAKE:
          if (field.type == HANDSHAKE_FIELD_DESC.type) {
            Handshake handshake;
            handshake = new Handshake();
            handshake.read(iprot);
            return handshake;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case NEXT_CMD:
          if (field.type == NEXT_CMD_FIELD_DESC.type) {
            NextCommand nextCmd;
            nextCmd = new NextCommand();
            nextCmd.read(iprot);
            return nextCmd;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ACK_CMD:
          if (field.type == ACK_CMD_FIELD_DESC.type) {
            AckCommand ackCmd;
            ackCmd = new AckCommand();
            ackCmd.read(iprot);
            return ackCmd;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case NACK_CMD:
          if (field.type == NACK_CMD_FIELD_DESC.type) {
            NackCommand nackCmd;
            nackCmd = new NackCommand();
            nackCmd.read(iprot);
            return nackCmd;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STREAM_IN:
          if (field.type == STREAM_IN_FIELD_DESC.type) {
            StreamIn streamIn;
            streamIn = new StreamIn();
            streamIn.read(iprot);
            return streamIn;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TASK_IDS:
          if (field.type == TASK_IDS_FIELD_DESC.type) {
            TaskIdsReply taskIds;
            taskIds = new TaskIdsReply();
            taskIds.read(iprot);
            return taskIds;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case HEARBEAT:
          if (field.type == HEARBEAT_FIELD_DESC.type) {
            Heartbeat hearbeat;
            hearbeat = new Heartbeat();
            hearbeat.read(iprot);
            return hearbeat;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case HANDSHAKE:
        Handshake handshake = (Handshake)value_;
        handshake.write(oprot);
        return;
      case NEXT_CMD:
        NextCommand nextCmd = (NextCommand)value_;
        nextCmd.write(oprot);
        return;
      case ACK_CMD:
        AckCommand ackCmd = (AckCommand)value_;
        ackCmd.write(oprot);
        return;
      case NACK_CMD:
        NackCommand nackCmd = (NackCommand)value_;
        nackCmd.write(oprot);
        return;
      case STREAM_IN:
        StreamIn streamIn = (StreamIn)value_;
        streamIn.write(oprot);
        return;
      case TASK_IDS:
        TaskIdsReply taskIds = (TaskIdsReply)value_;
        taskIds.write(oprot);
        return;
      case HEARBEAT:
        Heartbeat hearbeat = (Heartbeat)value_;
        hearbeat.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case HANDSHAKE:
          Handshake handshake;
          handshake = new Handshake();
          handshake.read(iprot);
          return handshake;
        case NEXT_CMD:
          NextCommand nextCmd;
          nextCmd = new NextCommand();
          nextCmd.read(iprot);
          return nextCmd;
        case ACK_CMD:
          AckCommand ackCmd;
          ackCmd = new AckCommand();
          ackCmd.read(iprot);
          return ackCmd;
        case NACK_CMD:
          NackCommand nackCmd;
          nackCmd = new NackCommand();
          nackCmd.read(iprot);
          return nackCmd;
        case STREAM_IN:
          StreamIn streamIn;
          streamIn = new StreamIn();
          streamIn.read(iprot);
          return streamIn;
        case TASK_IDS:
          TaskIdsReply taskIds;
          taskIds = new TaskIdsReply();
          taskIds.read(iprot);
          return taskIds;
        case HEARBEAT:
          Heartbeat hearbeat;
          hearbeat = new Heartbeat();
          hearbeat.read(iprot);
          return hearbeat;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case HANDSHAKE:
        Handshake handshake = (Handshake)value_;
        handshake.write(oprot);
        return;
      case NEXT_CMD:
        NextCommand nextCmd = (NextCommand)value_;
        nextCmd.write(oprot);
        return;
      case ACK_CMD:
        AckCommand ackCmd = (AckCommand)value_;
        ackCmd.write(oprot);
        return;
      case NACK_CMD:
        NackCommand nackCmd = (NackCommand)value_;
        nackCmd.write(oprot);
        return;
      case STREAM_IN:
        StreamIn streamIn = (StreamIn)value_;
        streamIn.write(oprot);
        return;
      case TASK_IDS:
        TaskIdsReply taskIds = (TaskIdsReply)value_;
        taskIds.write(oprot);
        return;
      case HEARBEAT:
        Heartbeat hearbeat = (Heartbeat)value_;
        hearbeat.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case HANDSHAKE:
        return HANDSHAKE_FIELD_DESC;
      case NEXT_CMD:
        return NEXT_CMD_FIELD_DESC;
      case ACK_CMD:
        return ACK_CMD_FIELD_DESC;
      case NACK_CMD:
        return NACK_CMD_FIELD_DESC;
      case STREAM_IN:
        return STREAM_IN_FIELD_DESC;
      case TASK_IDS:
        return TASK_IDS_FIELD_DESC;
      case HEARBEAT:
        return HEARBEAT_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public Handshake getHandshake() {
    if (getSetField() == _Fields.HANDSHAKE) {
      return (Handshake)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'handshake' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setHandshake(Handshake value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.HANDSHAKE;
    value_ = value;
  }

  public NextCommand getNextCmd() {
    if (getSetField() == _Fields.NEXT_CMD) {
      return (NextCommand)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'nextCmd' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setNextCmd(NextCommand value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.NEXT_CMD;
    value_ = value;
  }

  public AckCommand getAckCmd() {
    if (getSetField() == _Fields.ACK_CMD) {
      return (AckCommand)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'ackCmd' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAckCmd(AckCommand value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ACK_CMD;
    value_ = value;
  }

  public NackCommand getNackCmd() {
    if (getSetField() == _Fields.NACK_CMD) {
      return (NackCommand)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'nackCmd' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setNackCmd(NackCommand value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.NACK_CMD;
    value_ = value;
  }

  public StreamIn getStreamIn() {
    if (getSetField() == _Fields.STREAM_IN) {
      return (StreamIn)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'streamIn' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStreamIn(StreamIn value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STREAM_IN;
    value_ = value;
  }

  public TaskIdsReply getTaskIds() {
    if (getSetField() == _Fields.TASK_IDS) {
      return (TaskIdsReply)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'taskIds' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTaskIds(TaskIdsReply value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TASK_IDS;
    value_ = value;
  }

  public Heartbeat getHearbeat() {
    if (getSetField() == _Fields.HEARBEAT) {
      return (Heartbeat)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'hearbeat' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setHearbeat(Heartbeat value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.HEARBEAT;
    value_ = value;
  }

  public boolean isSetHandshake() {
    return setField_ == _Fields.HANDSHAKE;
  }


  public boolean isSetNextCmd() {
    return setField_ == _Fields.NEXT_CMD;
  }


  public boolean isSetAckCmd() {
    return setField_ == _Fields.ACK_CMD;
  }


  public boolean isSetNackCmd() {
    return setField_ == _Fields.NACK_CMD;
  }


  public boolean isSetStreamIn() {
    return setField_ == _Fields.STREAM_IN;
  }


  public boolean isSetTaskIds() {
    return setField_ == _Fields.TASK_IDS;
  }


  public boolean isSetHearbeat() {
    return setField_ == _Fields.HEARBEAT;
  }


  public boolean equals(Object other) {
    if (other instanceof StormMsg) {
      return equals((StormMsg)other);
    } else {
      return false;
    }
  }

  public boolean equals(StormMsg other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(StormMsg other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
