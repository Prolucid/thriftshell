/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.prolucid.thriftshell.messages;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class Variant extends org.apache.thrift.TUnion<Variant, Variant._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Variant");
  private static final org.apache.thrift.protocol.TField STR_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("strVal", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INT32_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("int32Val", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField INT64_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("int64Val", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField INT16_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("int16Val", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField DOUBLE_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleVal", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField BYTE_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("byteVal", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField BOOL_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("boolVal", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField ISO8601_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("iso8601Val", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BYTES_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bytesVal", org.apache.thrift.protocol.TType.STRING, (short)9);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STR_VAL((short)1, "strVal"),
    INT32_VAL((short)2, "int32Val"),
    INT64_VAL((short)3, "int64Val"),
    INT16_VAL((short)4, "int16Val"),
    DOUBLE_VAL((short)5, "doubleVal"),
    BYTE_VAL((short)6, "byteVal"),
    BOOL_VAL((short)7, "boolVal"),
    ISO8601_VAL((short)8, "iso8601Val"),
    BYTES_VAL((short)9, "bytesVal");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STR_VAL
          return STR_VAL;
        case 2: // INT32_VAL
          return INT32_VAL;
        case 3: // INT64_VAL
          return INT64_VAL;
        case 4: // INT16_VAL
          return INT16_VAL;
        case 5: // DOUBLE_VAL
          return DOUBLE_VAL;
        case 6: // BYTE_VAL
          return BYTE_VAL;
        case 7: // BOOL_VAL
          return BOOL_VAL;
        case 8: // ISO8601_VAL
          return ISO8601_VAL;
        case 9: // BYTES_VAL
          return BYTES_VAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STR_VAL, new org.apache.thrift.meta_data.FieldMetaData("strVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INT32_VAL, new org.apache.thrift.meta_data.FieldMetaData("int32Val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INT64_VAL, new org.apache.thrift.meta_data.FieldMetaData("int64Val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INT16_VAL, new org.apache.thrift.meta_data.FieldMetaData("int16Val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.DOUBLE_VAL, new org.apache.thrift.meta_data.FieldMetaData("doubleVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BYTE_VAL, new org.apache.thrift.meta_data.FieldMetaData("byteVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.BOOL_VAL, new org.apache.thrift.meta_data.FieldMetaData("boolVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ISO8601_VAL, new org.apache.thrift.meta_data.FieldMetaData("iso8601Val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BYTES_VAL, new org.apache.thrift.meta_data.FieldMetaData("bytesVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Variant.class, metaDataMap);
  }

  public Variant() {
    super();
  }

  public Variant(_Fields setField, Object value) {
    super(setField, value);
  }

  public Variant(Variant other) {
    super(other);
  }
  public Variant deepCopy() {
    return new Variant(this);
  }

  public static Variant strVal(String value) {
    Variant x = new Variant();
    x.setStrVal(value);
    return x;
  }

  public static Variant int32Val(int value) {
    Variant x = new Variant();
    x.setInt32Val(value);
    return x;
  }

  public static Variant int64Val(long value) {
    Variant x = new Variant();
    x.setInt64Val(value);
    return x;
  }

  public static Variant int16Val(short value) {
    Variant x = new Variant();
    x.setInt16Val(value);
    return x;
  }

  public static Variant doubleVal(double value) {
    Variant x = new Variant();
    x.setDoubleVal(value);
    return x;
  }

  public static Variant byteVal(byte value) {
    Variant x = new Variant();
    x.setByteVal(value);
    return x;
  }

  public static Variant boolVal(boolean value) {
    Variant x = new Variant();
    x.setBoolVal(value);
    return x;
  }

  public static Variant iso8601Val(String value) {
    Variant x = new Variant();
    x.setIso8601Val(value);
    return x;
  }

  public static Variant bytesVal(ByteBuffer value) {
    Variant x = new Variant();
    x.setBytesVal(value);
    return x;
  }

  public static Variant bytesVal(byte[] value) {
    Variant x = new Variant();
    x.setBytesVal(ByteBuffer.wrap(Arrays.copyOf(value, value.length)));
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case STR_VAL:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'strVal', but got " + value.getClass().getSimpleName());
      case INT32_VAL:
        if (value instanceof Integer) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Integer for field 'int32Val', but got " + value.getClass().getSimpleName());
      case INT64_VAL:
        if (value instanceof Long) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Long for field 'int64Val', but got " + value.getClass().getSimpleName());
      case INT16_VAL:
        if (value instanceof Short) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Short for field 'int16Val', but got " + value.getClass().getSimpleName());
      case DOUBLE_VAL:
        if (value instanceof Double) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Double for field 'doubleVal', but got " + value.getClass().getSimpleName());
      case BYTE_VAL:
        if (value instanceof Byte) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Byte for field 'byteVal', but got " + value.getClass().getSimpleName());
      case BOOL_VAL:
        if (value instanceof Boolean) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Boolean for field 'boolVal', but got " + value.getClass().getSimpleName());
      case ISO8601_VAL:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'iso8601Val', but got " + value.getClass().getSimpleName());
      case BYTES_VAL:
        if (value instanceof ByteBuffer) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ByteBuffer for field 'bytesVal', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case STR_VAL:
          if (field.type == STR_VAL_FIELD_DESC.type) {
            String strVal;
            strVal = iprot.readString();
            return strVal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case INT32_VAL:
          if (field.type == INT32_VAL_FIELD_DESC.type) {
            Integer int32Val;
            int32Val = iprot.readI32();
            return int32Val;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case INT64_VAL:
          if (field.type == INT64_VAL_FIELD_DESC.type) {
            Long int64Val;
            int64Val = iprot.readI64();
            return int64Val;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case INT16_VAL:
          if (field.type == INT16_VAL_FIELD_DESC.type) {
            Short int16Val;
            int16Val = iprot.readI16();
            return int16Val;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DOUBLE_VAL:
          if (field.type == DOUBLE_VAL_FIELD_DESC.type) {
            Double doubleVal;
            doubleVal = iprot.readDouble();
            return doubleVal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BYTE_VAL:
          if (field.type == BYTE_VAL_FIELD_DESC.type) {
            Byte byteVal;
            byteVal = iprot.readByte();
            return byteVal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BOOL_VAL:
          if (field.type == BOOL_VAL_FIELD_DESC.type) {
            Boolean boolVal;
            boolVal = iprot.readBool();
            return boolVal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ISO8601_VAL:
          if (field.type == ISO8601_VAL_FIELD_DESC.type) {
            String iso8601Val;
            iso8601Val = iprot.readString();
            return iso8601Val;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BYTES_VAL:
          if (field.type == BYTES_VAL_FIELD_DESC.type) {
            ByteBuffer bytesVal;
            bytesVal = iprot.readBinary();
            return bytesVal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case STR_VAL:
        String strVal = (String)value_;
        oprot.writeString(strVal);
        return;
      case INT32_VAL:
        Integer int32Val = (Integer)value_;
        oprot.writeI32(int32Val);
        return;
      case INT64_VAL:
        Long int64Val = (Long)value_;
        oprot.writeI64(int64Val);
        return;
      case INT16_VAL:
        Short int16Val = (Short)value_;
        oprot.writeI16(int16Val);
        return;
      case DOUBLE_VAL:
        Double doubleVal = (Double)value_;
        oprot.writeDouble(doubleVal);
        return;
      case BYTE_VAL:
        Byte byteVal = (Byte)value_;
        oprot.writeByte(byteVal);
        return;
      case BOOL_VAL:
        Boolean boolVal = (Boolean)value_;
        oprot.writeBool(boolVal);
        return;
      case ISO8601_VAL:
        String iso8601Val = (String)value_;
        oprot.writeString(iso8601Val);
        return;
      case BYTES_VAL:
        ByteBuffer bytesVal = (ByteBuffer)value_;
        oprot.writeBinary(bytesVal);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case STR_VAL:
          String strVal;
          strVal = iprot.readString();
          return strVal;
        case INT32_VAL:
          Integer int32Val;
          int32Val = iprot.readI32();
          return int32Val;
        case INT64_VAL:
          Long int64Val;
          int64Val = iprot.readI64();
          return int64Val;
        case INT16_VAL:
          Short int16Val;
          int16Val = iprot.readI16();
          return int16Val;
        case DOUBLE_VAL:
          Double doubleVal;
          doubleVal = iprot.readDouble();
          return doubleVal;
        case BYTE_VAL:
          Byte byteVal;
          byteVal = iprot.readByte();
          return byteVal;
        case BOOL_VAL:
          Boolean boolVal;
          boolVal = iprot.readBool();
          return boolVal;
        case ISO8601_VAL:
          String iso8601Val;
          iso8601Val = iprot.readString();
          return iso8601Val;
        case BYTES_VAL:
          ByteBuffer bytesVal;
          bytesVal = iprot.readBinary();
          return bytesVal;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case STR_VAL:
        String strVal = (String)value_;
        oprot.writeString(strVal);
        return;
      case INT32_VAL:
        Integer int32Val = (Integer)value_;
        oprot.writeI32(int32Val);
        return;
      case INT64_VAL:
        Long int64Val = (Long)value_;
        oprot.writeI64(int64Val);
        return;
      case INT16_VAL:
        Short int16Val = (Short)value_;
        oprot.writeI16(int16Val);
        return;
      case DOUBLE_VAL:
        Double doubleVal = (Double)value_;
        oprot.writeDouble(doubleVal);
        return;
      case BYTE_VAL:
        Byte byteVal = (Byte)value_;
        oprot.writeByte(byteVal);
        return;
      case BOOL_VAL:
        Boolean boolVal = (Boolean)value_;
        oprot.writeBool(boolVal);
        return;
      case ISO8601_VAL:
        String iso8601Val = (String)value_;
        oprot.writeString(iso8601Val);
        return;
      case BYTES_VAL:
        ByteBuffer bytesVal = (ByteBuffer)value_;
        oprot.writeBinary(bytesVal);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case STR_VAL:
        return STR_VAL_FIELD_DESC;
      case INT32_VAL:
        return INT32_VAL_FIELD_DESC;
      case INT64_VAL:
        return INT64_VAL_FIELD_DESC;
      case INT16_VAL:
        return INT16_VAL_FIELD_DESC;
      case DOUBLE_VAL:
        return DOUBLE_VAL_FIELD_DESC;
      case BYTE_VAL:
        return BYTE_VAL_FIELD_DESC;
      case BOOL_VAL:
        return BOOL_VAL_FIELD_DESC;
      case ISO8601_VAL:
        return ISO8601_VAL_FIELD_DESC;
      case BYTES_VAL:
        return BYTES_VAL_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public String getStrVal() {
    if (getSetField() == _Fields.STR_VAL) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'strVal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStrVal(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STR_VAL;
    value_ = value;
  }

  public int getInt32Val() {
    if (getSetField() == _Fields.INT32_VAL) {
      return (Integer)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'int32Val' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setInt32Val(int value) {
    setField_ = _Fields.INT32_VAL;
    value_ = value;
  }

  public long getInt64Val() {
    if (getSetField() == _Fields.INT64_VAL) {
      return (Long)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'int64Val' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setInt64Val(long value) {
    setField_ = _Fields.INT64_VAL;
    value_ = value;
  }

  public short getInt16Val() {
    if (getSetField() == _Fields.INT16_VAL) {
      return (Short)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'int16Val' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setInt16Val(short value) {
    setField_ = _Fields.INT16_VAL;
    value_ = value;
  }

  public double getDoubleVal() {
    if (getSetField() == _Fields.DOUBLE_VAL) {
      return (Double)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'doubleVal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDoubleVal(double value) {
    setField_ = _Fields.DOUBLE_VAL;
    value_ = value;
  }

  public byte getByteVal() {
    if (getSetField() == _Fields.BYTE_VAL) {
      return (Byte)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'byteVal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setByteVal(byte value) {
    setField_ = _Fields.BYTE_VAL;
    value_ = value;
  }

  public boolean getBoolVal() {
    if (getSetField() == _Fields.BOOL_VAL) {
      return (Boolean)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'boolVal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBoolVal(boolean value) {
    setField_ = _Fields.BOOL_VAL;
    value_ = value;
  }

  public String getIso8601Val() {
    if (getSetField() == _Fields.ISO8601_VAL) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'iso8601Val' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setIso8601Val(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ISO8601_VAL;
    value_ = value;
  }

  public byte[] getBytesVal() {
    setBytesVal(org.apache.thrift.TBaseHelper.rightSize(bufferForBytesVal()));
    ByteBuffer b = bufferForBytesVal();
    return b == null ? null : b.array();
  }

  public ByteBuffer bufferForBytesVal() {
    if (getSetField() == _Fields.BYTES_VAL) {
      return org.apache.thrift.TBaseHelper.copyBinary((ByteBuffer)getFieldValue());
    } else {
      throw new RuntimeException("Cannot get field 'bytesVal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBytesVal(byte[] value) {
    setBytesVal(ByteBuffer.wrap(Arrays.copyOf(value, value.length)));
  }

  public void setBytesVal(ByteBuffer value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.BYTES_VAL;
    value_ = value;
  }

  public boolean isSetStrVal() {
    return setField_ == _Fields.STR_VAL;
  }


  public boolean isSetInt32Val() {
    return setField_ == _Fields.INT32_VAL;
  }


  public boolean isSetInt64Val() {
    return setField_ == _Fields.INT64_VAL;
  }


  public boolean isSetInt16Val() {
    return setField_ == _Fields.INT16_VAL;
  }


  public boolean isSetDoubleVal() {
    return setField_ == _Fields.DOUBLE_VAL;
  }


  public boolean isSetByteVal() {
    return setField_ == _Fields.BYTE_VAL;
  }


  public boolean isSetBoolVal() {
    return setField_ == _Fields.BOOL_VAL;
  }


  public boolean isSetIso8601Val() {
    return setField_ == _Fields.ISO8601_VAL;
  }


  public boolean isSetBytesVal() {
    return setField_ == _Fields.BYTES_VAL;
  }


  public boolean equals(Object other) {
    if (other instanceof Variant) {
      return equals((Variant)other);
    } else {
      return false;
    }
  }

  public boolean equals(Variant other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(Variant other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
